fn main () -> i32 {
    let a:i32 = f(2) + f(3)
    return a + 5
}

fn f(a:i32) -> i32 {
    return a + 1
}

if expr {

} optional(else) {

}

types (i32, bool)       false | true

BOp = {+-*/%&&||}

Unop = {"-  !"}

while expr {

}

KEYWORDS = let, else, return, fn


STRUCTURE
source String -> Create tokens -> Tokens -> Create Tree -> Parsed Tree -> Translate -> Output
                |           PARSER                        |


fn -> name -> ( -> args ->) -> return type -> { -> 
 
let -> a -> : -> i32 -> = -> f -> ( -> arg -> ) -> + -> f -> ( -> arg -> ) -> ; 

return -> a -> + -> 5 -> }




seperated_list(tag(","), arg)