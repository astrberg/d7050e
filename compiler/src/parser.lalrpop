use std::str::FromStr;
use crate::ast::*;
use crate::types::Type;


grammar;

pub Program = <FunctionDec*>;

FunctionDec: Box<FunctionDec> = {
    "fn" <name:Id> "(" <params:Comma<Params>> ")" "->" <return_type:Type> "{" <body:Statement*> "}" => Box::new(FunctionDec{name, params, return_type, body}),
    "fn" <name:Id> "(" <params:Comma<Params>> ")" "{" <body:Statement*> "}" => Box::new(FunctionDec{name, params, return_type:Type::None, body}),
}

Params: Params = {
    <name:Id> ":" <data_type:Type> => Params{<>}
}

pub Statement: Box<Statement> = {
    "let" <name:Id> ":" <data_type:Type> <assign:AssignOp> <expr:Expr> ";" => Box::new(Statement::Let(<>)),
    "if" <cond:Log> "{" <body:Statement*> "}" => Box::new(Statement::If(<>)),
    "while" <cond:Log> "{" <body:Statement*> "}" => Box::new(Statement::While(<>)),
    "return" <expr:Expr> ";" => Box::new(Statement::Return(<>)),
    <Expr> ";" => Box::new(Statement::Expr(<>)),
}

pub Expr = Tier<AssignOp, Log>;
pub Log = Tier<LogOp, Cond>;
pub Cond = Tier<CondOp, Sum>;
Sum = Tier<SumOp, Factor>;
Factor = Tier<FactorOp, Term>;

Tier<Op,NextTier>: Box<Expr> = {
    Tier<Op,NextTier> Op NextTier => Box::new(Expr::Op(<>)),
	NextTier
};

CondOp: Op = {
    ">" => Op::GreaterThan,
    "<" => Op::LessThan,
    "==" => Op::IsEq,
    "!=" => Op::NotEq,
}

LogOp: Op = {
    "&&" => Op::And,
    "||" => Op::Or,
    "!" => Op::Not,
}

AssignOp: Op = {
    "=" => Op::Equal,
    "+=" => Op::AddEq,
    "-=" => Op::SubEq,
    "/=" => Op::DivEq,
    "*=" => Op::MulEq,
}

SumOp: Op = { 
    "+" => Op::Add,
    "-" => Op::Sub,
}

FactorOp: Op = {
    "*" => Op::Mul,
    "/" => Op::Div,
}

Term: Box<Expr> = {
    Num => Box::new(Expr::Number(<>)),
    Id => Box::new(Expr::Var(<>)),
    Bool => Box::new(Expr::Bool(<>)),
    Function,
    "(" <Expr> ")",
}

Type: Type = {
    "i32" => Type::I32,
    "bool" => Type::Bool,
}

Num: i32 = {
    <n:r"[-]?[0-9]+"> => i32::from_str(n).unwrap(),
}

Id: String = {
    r"[a-zA-Z_][a-zA-Z0-9_]*" => <>.to_string()
}

Bool: bool = {
    "true" => true,
    "false" => false,
}

Function: Box<Expr> = {
    <name:Id> "(" <args:Comma<Expr>> ")" => Box::new(Expr::Function(<>)),
}

// http://lalrpop.github.io/lalrpop/tutorial/007_macros.html
Comma<T>:Vec<T> = {
    <v:(<T> ",")*> <e:T?> => match e {
        None => v,
        Some(e) => {
            let mut v = v;
            v.push(e);
            v
        }
    }
}